{"version":3,"sources":["components/skills.jsx","helpers/data.js","helpers/helpers.jsx","components/render-inputs.jsx","components/submit-block.jsx","helpers/validation-shema.js","components/basic.jsx","components/app.jsx","index.jsx"],"names":["Skills","formik","skillIndex","values","touched","errors","name","render","arrayHelpers","skillId","className","htmlFor","skills","map","skill","index","key","id","placeholder","type","htmlType","onClick","push","defaultProps","inputsData","label","required","password","format","repeatPassword","email","website","getInputClass","classNames","age","forEach","value","RenderInputs","response","handleFocus","Object","keys","authErrMsg","onFocus","SubmitBlock","loading","handleReset","acceptTermsError","acceptTerms","successMessage","failedMessage","checked","onBlur","handleBlur","onChange","handleChange","disabled","size","SignupShema","Yup","min","max","matches","oneOf","url","of","Basic","props","reset","setState","handleSubmit","setSubmitting","newValues","filter","data","JSON","stringify","getFetch","state","setTimeout","a","async","fetch","method","headers","body","res","text","result","resetForm","this","initialValues","validationSchema","onSubmit","React","Component","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.084689d0.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'antd';\nimport { FieldArray, Field } from 'formik';\n\nconst Skills = ({ formik, skillIndex }) => {\n  const { values, touched, errors } = formik;\n  return (\n    <FieldArray\n      name=\"skills\"\n      render={arrayHelpers => {\n        let skillId = skillIndex;\n        return (\n          <li className=\"form-control__list-item\">\n            <label htmlFor=\"skills\" className=\"form-control__label\">\n              Навыки:\n            </label>\n            <div className=\"form-control__skills-box\">\n              {values.skills.map((skill, index) => {\n                skillId += 1;\n                return (\n                  <div className=\"form-control__skill-box\" key={`id_${skillId}`}>\n                    <Field\n                      name={`skills.${index}`}\n                      id=\"skills\"\n                      className=\"form-control__input\"\n                      placeholder=\"Введите сюда свои навыки...\"\n                    />\n                    {touched.skills && errors.skills ? (\n                      <div className=\"form-control__skills-message\">{errors.skills}</div>\n                    ) : null}\n                  </div>\n                );\n              })}\n              <Button\n                type=\"default\"\n                className=\"btn-add\"\n                htmlType=\"button\"\n                onClick={() => arrayHelpers.push('')}\n              >\n                Добавить навык\n              </Button>\n            </div>\n          </li>\n        );\n      }}\n    />\n  );\n};\n\nexport default Skills;\n\nSkills.defaultProps = {\n  formik: {},\n  skillIndex: 1,\n};\n\nSkills.propTypes = {\n  formik: PropTypes.shape({\n    values: PropTypes.object,\n    errors: PropTypes.object,\n    touched: PropTypes.object,\n  }),\n  skillIndex: PropTypes.number,\n};\n","const inputsData = {\n  name: {\n    label: 'Имя:',\n    placeholder: 'Введите имя...',\n    required: true,\n    id: 'name',\n    type: 'text',\n  },\n  password: {\n    label: 'Пароль:',\n    placeholder: 'Введите пароль...',\n    required: true,\n    id: 'password',\n    type: 'password',\n    format:\n      'Формат пароля:\"латинские буквы и цифры, от 8 до 40 символов, как минимум 1 цифра и 1 заглавная буква\"',\n  },\n  repeatPassword: {\n    label: 'Повторите:',\n    placeholder: 'Введите пароль...',\n    required: true,\n    id: 'repeatPassword',\n    type: 'password',\n  },\n  email: {\n    label: 'Email:',\n    placeholder: 'Введите email...',\n    required: true,\n    id: 'email',\n    type: 'email',\n    format: 'Формат \"name@something.com\"',\n  },\n  website: {\n    label: 'Вебсайт:',\n    placeholder: 'Введите адресс сайта...',\n    required: false,\n    id: 'website',\n    type: 'url',\n    format: 'Формат \"http://someaddress.com\"',\n  },\n};\n\nexport default inputsData;\n","const getInputClass = (touched, errors) => {\n  const valuesInput = ['name', 'password', 'repeatPassword', 'email', 'website', 'age', 'skills'];\n  const classNames = {\n    name: '',\n    password: '',\n    repeatPassword: '',\n    email: '',\n    website: '',\n    age: '',\n    skills: '',\n  };\n\n  valuesInput.forEach(value => {\n    if (touched[value] && errors[value]) {\n      classNames[value] = 'form-control__input form-control__input--invalid';\n    } else if (touched[value] && !errors[value]) {\n      classNames[value] = 'form-control__input form-control__input--valid';\n    } else {\n      classNames[value] = 'form-control__input';\n    }\n  });\n\n  return classNames;\n};\n\nexport default getInputClass;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Field } from 'formik';\nimport inputsData from '../helpers/data';\nimport getInputClass from '../helpers/helpers';\n\nconst RenderInputs = ({ formik, response, handleFocus }) => {\n  const { touched, errors } = formik;\n  const classNames = getInputClass(touched, errors);\n  return Object.keys(inputsData).map(key => {\n    const authErrMsg =\n      key === 'email' && response === 'Пользователь с таким email уже существует' ? (\n        <div className=\"form-control__error-message\">{response}</div>\n      ) : null;\n    return (\n      <li className=\"form-control__list-item\" key={`id_${key}`}>\n        <div className=\"form-control__list-box\">\n          <label htmlFor={key} className=\"form-control__label\">\n            {inputsData[key].label}\n          </label>\n          <Field\n            className={classNames[key]}\n            id={inputsData[key].id}\n            placeholder={inputsData[key].placeholder}\n            type={inputsData[key].type}\n            required={inputsData[key].required}\n            name={key}\n            onFocus={handleFocus}\n          />\n          {inputsData[key].format ? (\n            <span className=\"form-control__hint\">{inputsData[key].format}</span>\n          ) : null}\n          {touched[key] && errors[key] ? (\n            <div className=\"form-control__error-message\">{errors[key]}</div>\n          ) : null}\n          {authErrMsg}\n        </div>\n      </li>\n    );\n  });\n};\n\nexport default RenderInputs;\n\nRenderInputs.defaultProps = {\n  formik: {},\n  response: null,\n  handleFocus: () => {},\n};\n\nRenderInputs.propTypes = {\n  formik: PropTypes.shape({\n    errors: PropTypes.object,\n    touched: PropTypes.object,\n  }),\n  response: PropTypes.string,\n  handleFocus: PropTypes.func,\n};\n","import React from 'react';\nimport { Button, Checkbox } from 'antd';\nimport PropTypes from 'prop-types';\n\nconst SubmitBlock = ({ formik, loading, response, handleReset }) => {\n  const acceptTermsError =\n    formik.touched.acceptTerms && formik.errors.acceptTerms ? (\n      <span className=\"form-control__accept-error\">{formik.errors.acceptTerms}</span>\n    ) : null;\n  const successMessage =\n    response === 'Вы успешно зарегестрированы!' ? (\n      <div className=\"form-control__success\">{response}</div>\n    ) : null;\n  const failedMessage =\n    response === 'Обнаружены неполадки, сообщение не отправленно' ? (\n      <div className=\"form-control__failed\">{response}</div>\n    ) : null;\n  return (\n    <div className=\"form-control__submit-block\">\n      <Checkbox\n        className=\"checked\"\n        name=\"acceptTerms\"\n        type=\"checkbox\"\n        id=\"acceptTerms\"\n        checked={formik.values.acceptTerms}\n        onBlur={formik.handleBlur}\n        onChange={formik.handleChange}\n      >\n        Согласие на обработку данных\n      </Checkbox>\n      {acceptTermsError}\n      <div className=\"form-control__btn-block\">\n        <Button\n          className=\"btn-submit\"\n          disabled={!formik.values.acceptTerms}\n          type=\"primary\"\n          size=\"large\"\n          htmlType=\"submit\"\n          loading={loading}\n        >\n          {loading ? 'Отправка...' : 'Отправить'}\n        </Button>\n        <Button\n          className=\"btn-reset\"\n          size=\"large\"\n          type=\"danger\"\n          htmlType=\"reset\"\n          onClick={() => handleReset(formik.handleReset)}\n          disabled={loading}\n        >\n          Сбосить\n        </Button>\n      </div>\n      {successMessage}\n      {failedMessage}\n    </div>\n  );\n};\n\nexport default SubmitBlock;\n\nSubmitBlock.defaultProps = {\n  formik: {},\n  response: '',\n  loading: false,\n  handleReset: () => {},\n};\n\nSubmitBlock.propTypes = {\n  formik: PropTypes.shape({\n    values: PropTypes.object,\n    handleChange: PropTypes.func,\n    handleBlur: PropTypes.func,\n    errors: PropTypes.object,\n    touched: PropTypes.object,\n    handleReset: PropTypes.func,\n  }),\n  response: PropTypes.string,\n  loading: PropTypes.bool,\n  handleReset: PropTypes.func,\n};\n","import * as Yup from 'yup';\n\nconst SignupShema = Yup.object({\n  name: Yup.string()\n    .min(3, 'Имя не менее 3 символов')\n    .max(50, 'Имя не более 50 символов')\n    .required('Обязательное поле'),\n  password: Yup.string()\n    .matches(/[0-9a-zA-Z]/, 'Пароль должен содержать латинские буквы')\n    .matches(/(?=.*[A-Z])/, 'Пароль должен содержать заглавную букву')\n    .matches(/(?=.*[0-9])/, 'Пароль должен содержать одну цифру')\n    .min(8, 'Не меньше 8')\n    .max(40, 'Не больше 40')\n    .required('Обязательное поле'),\n  repeatPassword: Yup.string()\n    .oneOf([Yup.ref('password')], 'Пароли не совпадают')\n    .required('Обязательное поле'),\n  email: Yup.string()\n    .email('Введите валидный email')\n    .required('Обязательное поле'),\n  age: Yup.number()\n    .min(18, 'Минимальный возраст 18 лет')\n    .max(65, 'Максимальный возраст 65 лет')\n    .required('Обязательное поле'),\n  website: Yup.string().url('Введите корректный url'),\n  acceptTerms: Yup.boolean()\n    .required('Обязательное поле')\n    .oneOf([true], 'Я принимаю правила и условия'),\n  skills: Yup.array().of(Yup.string().min(3, 'Не менее 3 символов')),\n});\n\nexport default SignupShema;\n","import React from 'react';\nimport { Formik } from 'formik';\nimport Skills from './skills';\nimport RenderInputs from './render-inputs';\nimport SubmitBlock from './submit-block';\nimport SignupShema from '../helpers/validation-shema';\n\nclass Basic extends React.Component {\n  skillIndex = 1;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      response: '',\n    };\n  }\n\n  getFetch(data, formik) {\n    setTimeout(async () => {\n      try {\n        const res = await fetch('http://localhost:8080/sign-up', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json;charset=utf-8',\n          },\n          body: data,\n        });\n\n        const result = await res.text();\n        this.setState({\n          loading: false,\n          response: result,\n        });\n        formik.setSubmitting(false);\n        if (result === 'Вы успешно зарегестрированы!') {\n          formik.resetForm();\n        }\n      } catch {\n        this.setState({\n          loading: false,\n          response: 'Обнаружены неполадки, сообщение не отправленно',\n        });\n        formik.setSubmitting(false);\n      }\n    }, 2000);\n  }\n\n  handleReset = reset => {\n    reset();\n    this.setState({\n      loading: false,\n      response: '',\n    });\n  };\n\n  handleFocus = () => {\n    this.setState({\n      response: '',\n    });\n  };\n\n  handleSubmit = (values, formik) => {\n    formik.setSubmitting(true);\n    this.setState({\n      loading: true,\n    });\n    const newValues = { ...values, skills: values.skills.filter(skill => skill !== '') };\n    const data = JSON.stringify(newValues);\n    this.getFetch(data, formik);\n  };\n\n  render() {\n    const { loading, response } = this.state;\n    const { handleFocus } = this;\n    return (\n      <Formik\n        initialValues={{\n          name: '',\n          password: '',\n          repeatPassword: '',\n          email: '',\n          website: '',\n          age: '',\n          skills: [''],\n          acceptTerms: false,\n        }}\n        validationSchema={SignupShema}\n        onSubmit={this.handleSubmit}\n      >\n        {formik => {\n          const { handleSubmit } = formik;\n          return (\n            <form className=\"form-control\" onSubmit={handleSubmit}>\n              <ul className=\"form-control__list\">\n                <li className=\"form-control__list-item\">\n                  <h2 className=\"form-control__heading\">Контактные данные</h2>\n                  <span className=\"form-control__required_notification\">\n                    * Поля, обязательные для заполнения\n                  </span>\n                </li>\n                <RenderInputs formik={formik} response={response} handleFocus={handleFocus} />\n                <Skills formik={formik} skillIndex={this.skillIndex} />\n              </ul>\n              <SubmitBlock\n                formik={formik}\n                loading={loading}\n                response={response}\n                handleReset={this.handleReset}\n              />\n            </form>\n          );\n        }}\n      </Formik>\n    );\n  }\n}\n\nexport default Basic;\n","import React from 'react';\nimport '../styles/styles.scss';\nimport Basic from './basic';\n\nconst App = () => {\n  return (\n    <div className=\"container\">\n      <Basic />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport App from './components/app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}