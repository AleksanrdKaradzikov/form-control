{"version":3,"sources":["components/skills.jsx","helpers/helpers.jsx","components/list-item.jsx","components/submit-block.jsx","helpers/validation-shema.js","components/basic.jsx","components/app.jsx","index.jsx"],"names":["Skills","formik","skillIndex","values","touched","errors","name","render","arrayHelpers","skillId","className","htmlFor","skills","map","skill","index","key","id","placeholder","type","htmlType","onClick","push","defaultProps","getInputType","value","checkRequired","ListItem","response","handleFocus","handleChange","handleBlur","labels","password","repeatPassword","email","website","age","format","classNames","forEach","getInputClass","Object","keys","authErrMsg","length","required","onChange","onBlur","onFocus","SubmitBlock","loading","handleReset","acceptTermsError","acceptTerms","successMessage","failedMessage","checked","disabled","size","SignupShema","Yup","min","max","matches","oneOf","url","of","Basic","props","reset","setState","handleSubmit","setSubmitting","newValues","filter","data","JSON","stringify","getFetch","state","setTimeout","a","async","fetch","method","headers","body","res","text","result","resetForm","this","initialValues","validationSchema","onSubmit","React","Component","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.145391fc.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'antd';\nimport { FieldArray, Field } from 'formik';\n\nconst Skills = ({ formik, skillIndex }) => {\n  const { values, touched, errors } = formik;\n  return (\n    <FieldArray\n      name=\"skills\"\n      render={arrayHelpers => {\n        let skillId = skillIndex;\n        return (\n          <li className=\"form-control__list-item\">\n            <label htmlFor=\"skills\" className=\"form-control__label\">\n              Навыки:\n            </label>\n            <div className=\"form-control__skills-box\">\n              {values.skills.map((skill, index) => {\n                skillId += 1;\n                return (\n                  <div className=\"form-control__skill-box\" key={`id_${skillId}`}>\n                    <Field\n                      name={`skills.${index}`}\n                      id=\"skills\"\n                      className=\"form-control__input\"\n                      placeholder=\"Введите сюда свои навыки...\"\n                    />\n                    {touched.skills && errors.skills ? (\n                      <div className=\"form-control__skills-message\">{errors.skills}</div>\n                    ) : null}\n                  </div>\n                );\n              })}\n              <Button\n                type=\"default\"\n                className=\"btn-add\"\n                htmlType=\"button\"\n                onClick={() => arrayHelpers.push('')}\n              >\n                Добавить навык\n              </Button>\n            </div>\n          </li>\n        );\n      }}\n    />\n  );\n};\n\nexport default Skills;\n\nSkills.defaultProps = {\n  formik: {},\n  skillIndex: 1,\n};\n\nSkills.propTypes = {\n  formik: PropTypes.shape({\n    values: PropTypes.object,\n    errors: PropTypes.object,\n    touched: PropTypes.object,\n  }),\n  skillIndex: PropTypes.number,\n};\n","const getInputClass = (touched, errors) => {\n  const valuesInput = ['name', 'password', 'repeatPassword', 'email', 'website', 'age', 'skills'];\n  const classNames = {\n    name: '',\n    password: '',\n    repeatPassword: '',\n    email: '',\n    website: '',\n    age: '',\n    skills: '',\n  };\n\n  valuesInput.forEach(value => {\n    if (touched[value] && errors[value]) {\n      classNames[value] = 'form-control__input form-control__input--invalid';\n    } else if (touched[value] && !errors[value]) {\n      classNames[value] = 'form-control__input form-control__input--valid';\n    } else {\n      classNames[value] = 'form-control__input';\n    }\n  });\n\n  return classNames;\n};\n\nconst getInputType = value => {\n  let type = '';\n  switch (value) {\n    case 'name': {\n      type = 'text';\n      return type;\n    }\n    case 'password': {\n      type = 'password';\n      return type;\n    }\n    case 'repeatPassword': {\n      type = 'password';\n      return type;\n    }\n    case 'email': {\n      type = 'email';\n      return type;\n    }\n    case 'website': {\n      type = 'url';\n      return type;\n    }\n    case 'age': {\n      type = 'number';\n      return type;\n    }\n    default: {\n      return type;\n    }\n  }\n};\n\nconst checkRequired = value => {\n  return (\n    value === 'name' ||\n    value === 'password' ||\n    value === 'repeatPassword' ||\n    value === 'email' ||\n    value === 'age'\n  );\n};\n\nexport { getInputClass, getInputType, checkRequired };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getInputClass, getInputType, checkRequired } from '../helpers/helpers';\n\nconst ListItem = ({ formik, response, handleFocus }) => {\n  const { values, handleChange, handleBlur, touched, errors } = formik;\n\n  const labels = {\n    name: ['Имя:', 'Введите имя...'],\n    password: ['Пароль:', 'Введите пароль...'],\n    repeatPassword: ['Повторите:', 'Повторите пароль...'],\n    email: ['Email:', 'Введите email...'],\n    website: ['Вебсайт:', 'Введите адресс сайта...'],\n    age: ['Возраст:', 'Введите ваш возраст...'],\n  };\n\n  const format = {\n    password:\n      'Формат пароля:\"латинские буквы и цифры, от 8 до 40 символов, как минимум 1 цифра и 1 заглавная буква\"',\n    email: 'Формат \"name@something.com\"',\n    website: 'Формат \"http://someaddress.com\"',\n  };\n\n  const classNames = getInputClass(touched, errors, values);\n\n  return Object.keys(values).map(value => {\n    if (value !== 'skills' && value !== 'acceptTerms') {\n      const authErrMsg =\n        value === 'email' && response === 'Пользователь с таким email уже существует' ? (\n          <div className=\"form-control__error-message form-control__error-message--visible\">\n            {response}\n          </div>\n        ) : null;\n      return (\n        <li className=\"form-control__list-item\" key={`id_${value.length}`}>\n          <div className=\"form-control__list-box\">\n            <label htmlFor={value} className=\"form-control__label\">\n              {labels[value][0]}\n            </label>\n            <input\n              className={classNames[value]}\n              id={value}\n              placeholder={labels[value][1]}\n              type={getInputType(value)}\n              required={checkRequired(value)}\n              value={values[value]}\n              onChange={handleChange}\n              name={value}\n              onBlur={handleBlur}\n              onFocus={handleFocus}\n            />\n            {format[value] ? <span className=\"form-control__hint\">{format[value]}</span> : null}\n            {touched[value] && errors[value] ? (\n              <div className=\"form-control__error-message\">{errors[value]}</div>\n            ) : null}\n            {authErrMsg}\n          </div>\n        </li>\n      );\n    }\n    return false;\n  });\n};\n\nexport default ListItem;\n\nListItem.defaultProps = {\n  formik: {},\n  response: null,\n  handleFocus: () => {},\n};\n\nListItem.propTypes = {\n  formik: PropTypes.shape({\n    values: PropTypes.object,\n    handleChange: PropTypes.func,\n    handleBlur: PropTypes.func,\n    errors: PropTypes.object,\n    touched: PropTypes.object,\n  }),\n  response: PropTypes.string,\n  handleFocus: PropTypes.func,\n};\n","import React from 'react';\nimport { Button, Checkbox } from 'antd';\nimport PropTypes from 'prop-types';\n\nconst SubmitBlock = ({ formik, loading, response, handleReset }) => {\n  const acceptTermsError =\n    formik.touched.acceptTerms && formik.errors.acceptTerms ? (\n      <span className=\"form-control__accept-error\">{formik.errors.acceptTerms}</span>\n    ) : null;\n  const successMessage =\n    response === 'Вы успешно зарегестрированы!' ? (\n      <div className=\"form-control__success\">{response}</div>\n    ) : null;\n  const failedMessage =\n    response === 'Обнаружены неполадки, сообщение не отправленно' ? (\n      <div className=\"form-control__failed\">{response}</div>\n    ) : null;\n  return (\n    <div className=\"form-control__submit-block\">\n      <Checkbox\n        className=\"checked\"\n        name=\"acceptTerms\"\n        type=\"checkbox\"\n        id=\"acceptTerms\"\n        checked={formik.values.acceptTerms}\n        onBlur={formik.handleBlur}\n        onChange={formik.handleChange}\n      >\n        Согласие на обработку данных\n      </Checkbox>\n      {acceptTermsError}\n      <div className=\"form-control__btn-block\">\n        <Button\n          className=\"btn-submit\"\n          disabled={!formik.values.acceptTerms}\n          type=\"primary\"\n          size=\"large\"\n          htmlType=\"submit\"\n          loading={loading}\n        >\n          {loading ? 'Отправка...' : 'Отправить'}\n        </Button>\n        <Button\n          className=\"btn-reset\"\n          size=\"large\"\n          type=\"danger\"\n          htmlType=\"reset\"\n          onClick={() => handleReset(formik.handleReset)}\n          disabled={loading}\n        >\n          Сбосить\n        </Button>\n      </div>\n      {successMessage}\n      {failedMessage}\n    </div>\n  );\n};\n\nexport default SubmitBlock;\n\nSubmitBlock.defaultProps = {\n  formik: {},\n  response: '',\n  loading: false,\n  handleReset: () => {},\n};\n\nSubmitBlock.propTypes = {\n  formik: PropTypes.shape({\n    values: PropTypes.object,\n    handleChange: PropTypes.func,\n    handleBlur: PropTypes.func,\n    errors: PropTypes.object,\n    touched: PropTypes.object,\n    handleReset: PropTypes.func,\n  }),\n  response: PropTypes.string,\n  loading: PropTypes.bool,\n  handleReset: PropTypes.func,\n};\n","import * as Yup from 'yup';\n\nconst SignupShema = Yup.object({\n  name: Yup.string()\n    .min(3, 'Имя не менее 3 символов')\n    .max(50, 'Имя не более 50 символов')\n    .required('Обязательное поле'),\n  password: Yup.string()\n    .matches(/[0-9a-zA-Z]/, 'Пароль должен содержать латинские буквы')\n    .matches(/(?=.*[A-Z])/, 'Пароль должен содержать заглавную букву')\n    .matches(/(?=.*[0-9])/, 'Пароль должен содержать одну цифру')\n    .min(8, 'Не меньше 8')\n    .max(40, 'Не больше 40')\n    .required('Обязательное поле'),\n  repeatPassword: Yup.string()\n    .oneOf([Yup.ref('password')], 'Пароли не совпадают')\n    .required('Обязательное поле'),\n  email: Yup.string()\n    .email('Введите валидный email')\n    .required('Обязательное поле'),\n  age: Yup.number()\n    .min(18, 'Минимальный возраст 18 лет')\n    .max(65, 'Максимальный возраст 65 лет')\n    .required('Обязательное поле'),\n  website: Yup.string().url('Введите корректный url'),\n  acceptTerms: Yup.boolean()\n    .required('Обязательное поле')\n    .oneOf([true], 'Я принимаю правила и условия'),\n  skills: Yup.array().of(Yup.string().min(3, 'Не менее 3 символов')),\n});\n\nexport default SignupShema;\n","import React from 'react';\nimport { Formik } from 'formik';\nimport Skills from './skills';\nimport ListItem from './list-item';\nimport SubmitBlock from './submit-block';\nimport SignupShema from '../helpers/validation-shema';\n\nclass Basic extends React.Component {\n  skillIndex = 1;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      response: '',\n    };\n  }\n\n  getFetch(data, formik) {\n    setTimeout(async () => {\n      try {\n        const res = await fetch('http://localhost:8080/sign-up', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json;charset=utf-8',\n          },\n          body: data,\n        });\n\n        const result = await res.text();\n        this.setState({\n          loading: false,\n          response: result,\n        });\n        formik.setSubmitting(false);\n        if (result === 'Вы успешно зарегестрированы!') {\n          formik.resetForm();\n        }\n      } catch {\n        this.setState({\n          loading: false,\n          response: 'Обнаружены неполадки, сообщение не отправленно',\n        });\n        formik.setSubmitting(false);\n      }\n    }, 2000);\n  }\n\n  handleReset = reset => {\n    reset();\n    this.setState({\n      loading: false,\n      response: '',\n    });\n  };\n\n  handleFocus = () => {\n    this.setState({\n      response: '',\n    });\n  };\n\n  handleSubmit = (values, formik) => {\n    formik.setSubmitting(true);\n    this.setState({\n      loading: true,\n    });\n    const newValues = { ...values, skills: values.skills.filter(skill => skill !== '') };\n    const data = JSON.stringify(newValues);\n    this.getFetch(data, formik);\n  };\n\n  render() {\n    const { loading, response } = this.state;\n    const { handleFocus } = this;\n    return (\n      <Formik\n        initialValues={{\n          name: '',\n          password: '',\n          repeatPassword: '',\n          email: '',\n          website: '',\n          age: '',\n          skills: [''],\n          acceptTerms: false,\n        }}\n        validationSchema={SignupShema}\n        onSubmit={this.handleSubmit}\n      >\n        {formik => {\n          const { handleSubmit } = formik;\n          return (\n            <form className=\"form-control\" onSubmit={handleSubmit}>\n              <ul className=\"form-control__list\">\n                <li className=\"form-control__list-item\">\n                  <h2 className=\"form-control__heading\">Контактные данные</h2>\n                  <span className=\"form-control__required_notification\">\n                    * Поля, обязательные для заполнения\n                  </span>\n                </li>\n                <ListItem formik={formik} response={response} handleFocus={handleFocus} />\n                <Skills formik={formik} skillIndex={this.skillIndex} />\n              </ul>\n              <SubmitBlock\n                formik={formik}\n                loading={loading}\n                response={response}\n                handleReset={this.handleReset}\n              />\n            </form>\n          );\n        }}\n      </Formik>\n    );\n  }\n}\n\nexport default Basic;\n","import React from 'react';\nimport '../styles/styles.scss';\nimport Basic from './basic';\n\nconst App = () => {\n  return (\n    <div className=\"container\">\n      <Basic />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport App from './components/app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}