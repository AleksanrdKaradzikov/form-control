{"version":3,"sources":["helpers/helpers.jsx","components/list-item.jsx","components/submit-block.jsx","helpers/validation-shema.js","components/basic.jsx","components/app.jsx","index.jsx"],"names":["getInputType","value","type","ListItem","formik","response","handleFocus","values","handleChange","handleBlur","touched","errors","labels","name","password","repeatPassword","email","website","age","format","classNames","skills","forEach","getInputClass","Object","keys","map","authErrMsg","className","key","length","htmlFor","id","placeholder","required","onChange","onBlur","onFocus","defaultProps","SubmitBlock","loading","acceptTermsError","acceptTerms","successMessage","checked","disabled","size","htmlType","onClick","handleReset","SignupShema","Yup","min","max","matches","oneOf","url","of","Basic","props","setState","state","this","initialValues","validationSchema","onSubmit","setSubmitting","newValues","filter","skill","data","JSON","stringify","setTimeout","a","async","fetch","method","headers","body","res","text","result","resetForm","handleSubmit","render","arrayHelpers","index","Fragment","insert","React","Component","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.354ff917.chunk.js","sourcesContent":["const getInputClass = (touched, errors) => {\n  const valuesInput = ['name', 'password', 'repeatPassword', 'email', 'website', 'age', 'skills'];\n  const classNames = {\n    name: '',\n    password: '',\n    repeatPassword: '',\n    email: '',\n    website: '',\n    age: '',\n    skills: '',\n  };\n\n  valuesInput.forEach(value => {\n    if (touched[value] && errors[value]) {\n      classNames[value] = 'form-control__input form-control__input--invalid';\n    } else if (touched[value] && !errors[value]) {\n      classNames[value] = 'form-control__input form-control__input--valid';\n    } else {\n      classNames[value] = 'form-control__input';\n    }\n  });\n\n  return classNames;\n};\n\nconst getInputType = value => {\n  let type = '';\n  switch (value) {\n    case 'name': {\n      type = 'text';\n      return type;\n    }\n    case 'password': {\n      type = 'password';\n      return type;\n    }\n    case 'repeatPassword': {\n      type = 'password';\n      return type;\n    }\n    case 'email': {\n      type = 'email';\n      return type;\n    }\n    case 'website': {\n      type = 'url';\n      return type;\n    }\n    case 'age': {\n      type = 'number';\n      return type;\n    }\n    default: {\n      return type;\n    }\n  }\n};\n\nexport { getInputClass, getInputType };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getInputClass, getInputType } from '../helpers/helpers';\n\nconst ListItem = ({ formik, response, handleFocus }) => {\n  const { values, handleChange, handleBlur, touched, errors } = formik;\n\n  const labels = {\n    name: ['Имя:', 'Введите имя...'],\n    password: ['Пароль:', 'Введите пароль...'],\n    repeatPassword: ['Повторите:', 'Повторите пароль...'],\n    email: ['Email:', 'Введите email...'],\n    website: ['Вебсайт:', 'Введите адресс сайта...'],\n    age: ['Возраст:', 'Введите ваш возраст...'],\n  };\n\n  const format = {\n    password: 'Формат пароля:\"resPonses12\"',\n    email: 'Формат \"name@something.com\"',\n    website: 'Формат \"http://someaddress.com\"',\n  };\n\n  const classNames = getInputClass(touched, errors, values);\n\n  return Object.keys(values).map(value => {\n    if (value !== 'skills' && value !== 'acceptTerms') {\n      const authErrMsg =\n        value === 'email' && response === 'Пользователь с таким email уже существует' ? (\n          <div className=\"form-control__error-message\">{response}</div>\n        ) : null;\n      return (\n        <li className=\"form-control__list-item\" key={`id_${value.length}`}>\n          <div className=\"form-control__list-box\">\n            <label htmlFor={value} className=\"form-control__label\">\n              {labels[value][0]}\n            </label>\n            <input\n              className={classNames[value]}\n              id={value}\n              placeholder={labels[value][1]}\n              type={getInputType(value)}\n              required={\n                !!(\n                  value === 'name' ||\n                  value === 'password' ||\n                  value === 'repeatPassword' ||\n                  value === 'email' ||\n                  value === 'age'\n                )\n              }\n              value={values[value]}\n              onChange={handleChange}\n              name={value}\n              onBlur={handleBlur}\n              onFocus={handleFocus}\n            />\n            {format[value] ? <span className=\"form-control__hint\">{format[value]}</span> : null}\n            {touched[value] && errors[value] ? (\n              <div className=\"form-control__error-message\">{errors[value]}</div>\n            ) : null}\n            {authErrMsg}\n          </div>\n        </li>\n      );\n    }\n    return false;\n  });\n};\n\nexport default ListItem;\n\nListItem.defaultProps = {\n  formik: {},\n  response: null,\n  handleFocus: () => {},\n};\n\nListItem.propTypes = {\n  formik: PropTypes.shape({\n    values: PropTypes.object,\n    handleChange: PropTypes.func,\n    handleBlur: PropTypes.func,\n    errors: PropTypes.object,\n    touched: PropTypes.object,\n  }),\n  response: PropTypes.string,\n  handleFocus: PropTypes.func,\n};\n","import React from 'react';\nimport { Button, Checkbox } from 'antd';\nimport 'antd/dist/antd.css';\nimport PropTypes from 'prop-types';\n\nconst SubmitBlock = ({ formik, loading, response }) => {\n  const acceptTermsError =\n    formik.touched.acceptTerms && formik.errors.acceptTerms ? (\n      <span className=\"form-control__accept-error\">{formik.errors.acceptTerms}</span>\n    ) : null;\n  const successMessage =\n    response === 'Вы успешно зарегестрированы!' ? (\n      <div className=\"form-control__success\">{response}</div>\n    ) : null;\n  return (\n    <div className=\"form-control__submit-block\">\n      <Checkbox\n        className=\"checked\"\n        name=\"acceptTerms\"\n        type=\"checkbox\"\n        id=\"acceptTerms\"\n        checked={formik.values.acceptTerms}\n        onBlur={formik.handleBlur}\n        onChange={formik.handleChange}\n      >\n        Согласие на обработку данных\n      </Checkbox>\n      {acceptTermsError}\n      <div className=\"form-control__btn-block\">\n        <Button\n          className=\"btn-submit\"\n          type=\"primary\"\n          disabled={!formik.values.acceptTerms}\n          size=\"large\"\n          htmlType=\"submit\"\n          loading={loading}\n        >\n          {loading ? 'Отправка...' : 'Отправить'}\n        </Button>\n        <Button\n          className=\"btn-reset\"\n          size=\"large\"\n          type=\"danger\"\n          htmlType=\"reset\"\n          onClick={formik.handleReset}\n          disabled={loading}\n        >\n          Сбосить\n        </Button>\n      </div>\n      {successMessage}\n    </div>\n  );\n};\n\nexport default SubmitBlock;\n\nSubmitBlock.defaultProps = {\n  formik: {},\n  response: '',\n  loading: false,\n};\n\nSubmitBlock.propTypes = {\n  formik: PropTypes.shape({\n    values: PropTypes.object,\n    handleChange: PropTypes.func,\n    handleBlur: PropTypes.func,\n    errors: PropTypes.object,\n    touched: PropTypes.object,\n    handleReset: PropTypes.func,\n  }),\n  response: PropTypes.string,\n  loading: PropTypes.bool,\n};\n","import * as Yup from 'yup';\n\nconst SignupShema = Yup.object({\n  name: Yup.string()\n    .min(3, 'Имя не менее 3 символов')\n    .max(50, 'Имя не более 50 символов')\n    .required('Обязательное поле'),\n  password: Yup.string()\n    .required('Обязательное поле')\n    .matches(\n      /^(?=^.{8,40}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z]).*$/,\n      'от 8 до 40 символов, 1 цифра и 1 заглавная буква'\n    ),\n  repeatPassword: Yup.string()\n    .oneOf([Yup.ref('password')], 'Пароли не совпадают')\n    .required('Обязательное поле'),\n  email: Yup.string()\n    .email('Введите валидный email')\n    .required('Обязательное поле'),\n  age: Yup.number()\n    .min(18, 'Минимальный возраст 18 лет')\n    .max(65, 'Максимальный возраст 65 лет')\n    .required('Обязательное поле'),\n  website: Yup.string().url('Введите корректный url'),\n  acceptTerms: Yup.boolean()\n    .required('Обязательное поле')\n    .oneOf([true], 'Я принимаю правила и условия'),\n  skills: Yup.array().of(Yup.string().min(3, 'Не менее 3 символов')),\n});\n\nexport default SignupShema;\n","import React from 'react';\nimport { Formik, FieldArray, Field } from 'formik';\nimport { Button } from 'antd';\nimport ListItem from './list-item';\nimport SubmitBlock from './submit-block';\nimport SignupShema from '../helpers/validation-shema';\n\nclass Basic extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      response: '',\n    };\n  }\n\n  handleFocus = () => {\n    this.setState({\n      response: '',\n    });\n  };\n\n  render() {\n    const { loading, response } = this.state;\n    const { handleFocus } = this;\n    return (\n      <Formik\n        initialValues={{\n          name: '',\n          password: '',\n          repeatPassword: '',\n          email: '',\n          website: '',\n          age: '',\n          skills: [''],\n          acceptTerms: false,\n        }}\n        validationSchema={SignupShema}\n        onSubmit={(values, formik) => {\n          formik.setSubmitting(false);\n          this.setState({\n            loading: true,\n          });\n          const newValues = { ...values, skills: values.skills.filter(skill => skill !== '') };\n          const data = JSON.stringify(newValues);\n          setTimeout(async () => {\n            const res = await fetch('http://localhost:8080/sign-up', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json;charset=utf-8',\n              },\n              body: data,\n            });\n\n            const result = await res.text();\n            this.setState({\n              loading: false,\n              response: result,\n            });\n            if (result === 'Вы успешно зарегестрированы!') {\n              formik.resetForm();\n            }\n          }, 2000);\n        }}\n      >\n        {formik => {\n          const { values, handleSubmit, touched, errors } = formik;\n          return (\n            <form className=\"form-control\" onSubmit={handleSubmit}>\n              <ul className=\"form-control__list\">\n                <li className=\"form-control__list-item\">\n                  <h2 className=\"form-control__heading\">Контактные данные</h2>\n                  <span className=\"form-control__required_notification\">\n                    * Поля, обязательные для заполнения\n                  </span>\n                </li>\n                <ListItem formik={formik} response={response} handleFocus={handleFocus} />\n                <FieldArray\n                  name=\"skills\"\n                  render={arrayHelpers => {\n                    return (\n                      <li className=\"form-control__list-item\">\n                        <label htmlFor=\"skills\" className=\"form-control__label\">\n                          Навыки:\n                        </label>\n                        <div className=\"form-control__skills-box\">\n                          {values.skills.map((skill, index) => {\n                            return (\n                              <React.Fragment key={`id_${skill.length + index}`}>\n                                <div className=\"form-control__skill-box\">\n                                  <Field\n                                    name={`skills.${index}`}\n                                    id=\"skills\"\n                                    className=\"form-control__input\"\n                                    placeholder=\"Введите сюда свои навыки...\"\n                                  />\n                                  <Button\n                                    type=\"primary\"\n                                    className=\"btn-add\"\n                                    htmlType=\"button\"\n                                    onClick={() => arrayHelpers.insert(index, '')}\n                                  >\n                                    +\n                                  </Button>\n                                </div>\n                                {touched.skills && errors.skills ? (\n                                  <div className=\"form-control__skills-message\">\n                                    {errors.skills}\n                                  </div>\n                                ) : null}\n                              </React.Fragment>\n                            );\n                          })}\n                        </div>\n                      </li>\n                    );\n                  }}\n                />\n              </ul>\n              <SubmitBlock formik={formik} loading={loading} response={response} />\n            </form>\n          );\n        }}\n      </Formik>\n    );\n  }\n}\n\nexport default Basic;\n","import React from 'react';\nimport '../styles/styles.scss';\nimport Basic from './basic';\n\nconst App = () => {\n  return (\n    <div className=\"container\">\n      <Basic />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport App from './components/app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}